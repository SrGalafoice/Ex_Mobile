package br.edu.fateczl.relatorios.persistence;

import android.annotation.SuppressLint;
import android.content.ContentValues;
import android.content.Context;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;

import java.sql.SQLException;
import java.util.List;

import br.edu.fateczl.relatorios.model.Autor;

public class AutorDao implements IAutorDao {
    private final Context context;

    private GenericDao genericDao;

    private SQLiteDatabase database;
    public AutorDao(Context context){
        this.context = context;
    }
    @Override
    public AutorDao open() throws SQLException {
        genericDao = new GenericDao(context);
        database = genericDao.getWritableDatabase();
        return this;
    }
    @Override
    public void close(){
        genericDao.close();
    }
    public void insert(Autor autor) throws SQLException {
        ContentValues contentValues = getContentValues(autor);
        database.insert("autor", null, contentValues);
    }

    public int update(Autor autor) throws SQLException {
        ContentValues contentValues = getContentValues(autor);
       return database.update("autor", contentValues, "nome = " + autor.getNome(),
                null);
    }
@SuppressLint("Range")
    public List<Autor> findAll() throws SQLException {
        List<Autor> autores = new ArrayList<>();
        String sql = "SELECT nome, apelido, anonimato, ordem FROM autor";
        Cursor cursor = database.rawQuery(sql, null);
        if (cursor != null ){
            cursor.moveToFirst();
        }
        while (!cursor.isAfterLast()){
            Autor a = new Autor();
            a.setNome(cursor.getString(cursor.getColumnIndex("nome")));
            a.setOrdem(Integer.parseInt(cursor.getString(cursor.getColumnIndex("ordem"))));
            a.setApelido(cursor.getString(cursor.getColumnIndex("apelido")));
            a.setAnonimato(Boolean.parseBoolean(cursor.getString(cursor.getColumnIndex("anonimato"))));
            autores.add(a);
            cursor.moveToNext();
        }
        cursor.close();
        return autores;
    }


    private static ContentValues getContentValues(Autor a) {
        ContentValues contentValues = new ContentValues();
        contentValues.put("nome", a.getNome());
        contentValues.put("anonimato", a.getAnonimato());
        contentValues.put("apelido", a.getApelido());
        contentValues.put("ordem", a.getOrdem());
        return contentValues;
    }
}
